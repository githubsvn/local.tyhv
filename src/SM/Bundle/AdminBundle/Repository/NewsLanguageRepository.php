<?php

namespace SM\Bundle\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\UnitOfWork;

/**
 * GroupsLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsLanguageRepository extends EntityRepository
{

    /**
     * @param type $criteria criteria
     *
     * @return type
     */
    public function getTotal($criteria = array())
    {
        $rst = $this->findBy($criteria);

        return count($rst);
    }

    /**
     * @param type $productId productId
     *
     * @return type
     */
    public function findByNewsId($id)
    {
        $rst = array();
        if (!empty($id)) {
            $rst = $this->findBy(array('news' => $id));
        }

        return $rst;
    }

    /**
     * @param type $productId productId
     *
     * @return type
     */
    public function findByNewsIdAndLang($id, $lang)
    {
        $rst = null;
        if (!empty($id)) {
            $rst = $this->findBy(array('news' => $id, 'language' => $lang));
            if (!empty($rst[0])) {
                $rst = $rst[0];
            }
        }

        return $rst;
    }

    public function getNewsLastestByNewsIdAndLangId($id, $lang, $limit = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('nl');

        $qb->select('nl, n')
                ->join('nl.news', 'n')
                ->where('nl.language=:langId');

        $currentEntity = $this->findByNewsIdAndLang($id, $lang);
        $catId = $currentEntity->getNews()->getCategory()->getId();
        
        $createdDate = $currentEntity->getNews()->getCreatedAt();
        $createdDate = $createdDate->format("Y-m-d H:i:s");

        $criteria = array();
        $criteria[1] = array(
            'fieldName' => 'created_at',
            'fieldValue' => $createdDate,
            'op' => '>',
        );
        $criteria[2] = array(
            'fieldName' => 'category',
            'fieldValue' => $catId,
            'op' => '=',
        );

        if (is_array($criteria) && count($criteria) > 0) {
            foreach ($criteria as $key => $cri) {
                $qb->andWhere("n." . $cri['fieldName'] . " " . $cri['op'] . " " . " ?$key");

                if ($cri['op'] == 'LIKE') {
                    $qb->setParameter($key, "%" . $cri['fieldValue'] . "%");
                } else {
                    $qb->setParameter($key, $cri['fieldValue']);
                }
            }
        }
        
        if (!empty($limit)) {
            $qb->setMaxResults($limit);
        }

        if (!empty($offset)) {
            $qb->setFirstResult($offset);
        }
        
        $qb->setParameter('langId', $lang);

        $qb->orderBy('n.updated_at', 'DESC');

        //echo $qb->getQuery()->getSQL();die;
        return $qb->getQuery()->getResult();
    }

    /**
     * 
     */
    public function getNewsOldestByNewsIdAndLangId($id, $lang, $limit = null, $offset = null)
    {
        $qb = $this->createQueryBuilder('nl');

        $qb->select('nl, n')
                ->join('nl.news', 'n')
                ->where('nl.language=:langId');

        $currentEntity = $this->findByNewsIdAndLang($id, $lang);
        $catId = $currentEntity->getNews()->getCategory()->getId();
        
        $createdDate = $currentEntity->getNews()->getCreatedAt();
        $createdDate = $createdDate->format("Y-m-d H:i:s");

        $criteria = array();
        $criteria[1] = array(
            'fieldName' => 'created_at',
            'fieldValue' => $createdDate,
            'op' => '<',
        );
        $criteria[2] = array(
            'fieldName' => 'category',
            'fieldValue' => $catId,
            'op' => '=',
        );

        if (is_array($criteria) && count($criteria) > 0) {
            foreach ($criteria as $key => $cri) {
                $qb->andWhere("n." . $cri['fieldName'] . " " . $cri['op'] . " " . " ?$key");

                if ($cri['op'] == 'LIKE') {
                    $qb->setParameter($key, "%" . $cri['fieldValue'] . "%");
                } else {
                    $qb->setParameter($key, $cri['fieldValue']);
                }
            }
        }
        
        if (!empty($limit)) {
            $qb->setMaxResults($limit);
        }

        if (!empty($offset)) {
            $qb->setFirstResult($offset);
        }
        
        $qb->setParameter('langId', $lang);
        $qb->orderBy('n.updated_at', 'DESC');

        //echo $qb->getQuery()->getSQL();die;
        return $qb->getQuery()->getResult();
    }

    /**
     * Delete language by array id
     *
     * @param array $ids
     *
     * @return array
     */
    public function deleteByIds($ids = array())
    {
        $em = $this->getEntityManager();
        $rep = $em->getRepository('SMAdminBundle:News');

        $rst = array();

        if (is_array($ids) && count($ids)) {
            foreach ($ids as $id) {
                $entity = $this->find($id);
                if ($entity instanceof \SM\Bundle\AdminBundle\Entity\NewsLanguage) {
                    $catId = $entity->getNews()->getId();
                    $em->remove($entity);
                    //Get all product language by idComtype
                    //If to have 1 item we need to delete product too
                    //else we need delete product language
                    $lstNewsLangs = $this->findByNewsId($catId);
                    if (count($lstNewsLangs) == 1) {
                        if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                            $rst[] = $id;
                        }
                        $em->persist($entity);
                        //delete product too
                        $em->flush();
                        //delete product language
                        $rep->deleteByIds(array($catId));
                    } else {
                        if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                            $rst[] = $id;
                        }
                        //Onlye delete article language
                        $em->flush();
                    }
                }
            }
        }

        return $rst;
    }

    /**
     *
     * @param type $langId
     * @param type $name
     * @param type $catId
     * @param type $limit
     * @param type $offset
     * @param type $criteria
     * @param type $orders
     * @return array 
     */
    public function findByLangAndNameAndCategory($langId, $name = '', $catId = '', $limit = null, $offset = null, $criteria = array(), $orders = array())
    {
        $rst = array();
        if (!empty($langId)) {
            $qb = $this->createQueryBuilder('nl');

            $qb->select('nl, n')
                    ->join('nl.news', 'n')
                    ->join('n.category', 'c')
                    ->where('nl.language=:langId');

            if (!empty($limit)) {
                $qb->setMaxResults($limit);
            }

            if (!empty($offset)) {
                $qb->setFirstResult($offset);
            }

            if (!empty($catId)) {
                $qb->andWhere('n.category=:catId');
                $qb->setParameter('catId', $catId);
            }

            if (!empty($name)) {
                $qb->andWhere('nl.name LIKE ?1');
                $qb->andWhere('nl.intro LIKE ?2');
                $qb->andWhere('nl.description LIKE ?3');
                $qb->setParameter(1, "%$name%");
                $qb->setParameter(2, "%$name%");
                $qb->setParameter(3, "%$name%");
            }

            if (is_array($criteria) && count($criteria) > 0) {
                foreach ($criteria as $key => $cri) {
                    $qb->andWhere("n." . $cri['fieldName'] . " " . $cri['op'] . " " . " ?$key");

                    if ($cri['op'] == 'LIKE') {
                        $qb->setParameter($key, "%" . $cri['fieldValue'] . "%");
                    } else {
                        $qb->setParameter($key, $cri['fieldValue']);
                    }
                }
            }

            $qb->setParameter('langId', $langId);

            if (!empty($orders)) {
                $qb->orderBy($orders);
            } else if (is_array($orders) && count($orders) > 0) {
                foreach ($orders as $k => $v) {
                    $qb->orderBy($k, $v);
                }
            } else {
                $qb->orderBy('n.updated_at', 'DESC');
            }

            //echo $qb->getQuery()->getSQL();die;
            return $qb->getQuery()->getResult();
        }

        return $rst;
    }

    /**
     *
     * @param type $langId
     * @param type $limit
     * @param type $offset
     * @param type $orders
     * @return array 
     */
    public function getHotNews($langId, $limit = null, $offset = null, $orders = '')
    {
        $rst = array();
        if (!empty($langId)) {
            $qb = $this->createQueryBuilder('nl');

            $qb->select('nl, n')
                    ->join('nl.news', 'n')
                    ->where('nl.language=:langId')
                    ->andWhere('n.status=1');

            if (!empty($limit)) {
                $qb->setMaxResults($limit);
            }

            if (!empty($offset)) {
                $qb->setFirstResult($offset);
            }
            $qb->setParameter('langId', $langId);

            if (!empty($orders)) {
                $qb->orderBy($orders);
            } else if (is_array($orders) && count($orders) > 0) {
                foreach ($orders as $k => $v) {
                    $qb->orderBy($k, $v);
                }
            } else {
                $qb->orderBy('n.updated_at', 'DESC');
            }

            //echo $qb->getQuery()->getSQL();die;
            return $qb->getQuery()->getResult();
        }

        return $rst;
    }

    /**
     *
     * @param type $langId
     * @param type $name
     * @param type $catId
     * @param type $criteria
     * @return type 
     */
    public function getTotalByLangAndNameAndCategory($langId, $name = '', $catId = '', $criteria = array())
    {
        if (!empty($langId)) {
            $qb = $this->createQueryBuilder('nl');

            $qb->select('nl, n')
                    ->join('nl.news', 'n')
                    ->join('n.category', 'c')
                    ->where('nl.language=:langId');

            if (!empty($limit)) {
                $qb->setMaxResults($limit);
            }

            if (!empty($offset)) {
                $qb->setFirstResult($offset);
            }

            if (!empty($catId)) {
                $qb->andWhere('n.category=:catId');
                $qb->setParameter('catId', $catId);
            }

            if (!empty($name)) {
                $qb->andWhere('nl.name LIKE ?1');
                $qb->andWhere('nl.intro LIKE ?2');
                $qb->andWhere('nl.description LIKE ?3');
                $qb->setParameter(1, "%$name%");
                $qb->setParameter(2, "%$name%");
                $qb->setParameter(3, "%$name%");
            }

            if (is_array($criteria) && count($criteria) > 0) {
                foreach ($criteria as $key => $cri) {
                    $qb->andWhere("n." . $cri['fieldName'] . " " . $cri['op'] . " " . " ?$key");

                    if ($cri['op'] == 'LIKE') {
                        $qb->setParameter($key, "%" . $cri['fieldValue'] . "%");
                    } else {
                        $qb->setParameter($key, $cri['fieldValue']);
                    }
                }
            }

            $qb->setParameter('langId', $langId);
            //echo $qb->getQuery()->getSQL();die;
            return count($qb->getQuery()->getResult());
        }
        return 0;
    }

}
