<?php

namespace SM\Bundle\AdminBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\UnitOfWork;

/**
 * ItemTypeLanguageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItemTypeLanguageRepository extends EntityRepository
{

    /**
     * @param type $criteria criteria
     *
     * @return type
     */
    public function getTotal($criteria = array())
    {
        $rst = $this->findBy($criteria);

        return count($rst);
    }

    /**
     * @param int $itemTypeId
     *
     * @return type
     */
    public function findByItemTypeId($itemTypeId)
    {
        $rst = array();
        if (!empty($itemTypeId)) {
            $rst = $this->findBy(array('itemtype' => $itemTypeId));
        }

        return $rst;
    }

    /**
     * @param int $itemTypeId
     *
     * @return type
     */
    public function findByItemTypeIdAndLangId($itemTypeId, $langId)
    {
        $rst = null;
        if (!empty($itemTypeId)) {
            $rst = $this->findBy(array('itemtype' => $itemTypeId, 'language' => $langId));
            if (!empty($rst[0])) {

                return $rst[0];
            }
        }

        return $rst;
    }

    /**
     * Delete language by array id
     *
     * @param array $ids
     *
     * @return array
     */
    public function deleteByIds($ids = array())
    {
        $em = $this->getEntityManager();
        $repComtype = $em->getRepository('SMAdminBundle:ItemType');

        $rst = array();
        if (is_array($ids) && count($ids)) {
            foreach ($ids as $id) {
                $entity = $this->find($id);
                $idItemType = $entity->getItemType()->getId();

                $em->remove($entity);

                //Get all company type language by idComtype
                //If to have 1 item we need to delete company type too
                //else we need delete company type language
                $lstLangs = $this->findByItemTypeId($idItemType);
                if (count($lstLangs) == 1) {
                    if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                        $rst[] = $id;
                    }
                    $em->persist($entity);
                    //delete article too
                    $em->flush();
                    //delete article language
                    $repComtype->deleteByIds(array($idItemType));
                } else {
                    if ($em->getUnitOfWork()->getEntityState($entity) == UnitOfWork::STATE_REMOVED) {
                        $rst[] = $id;
                    }
                    //Onlye delete article language
                    $em->flush();
                }
            }
        }

        return $rst;
    }

    public function getListItemByCat($langId, $limitCat = 2, $limitItem = 4, $orders = array())
    {
        $rst = array();
        
        $qb = $this->createQueryBuilder('itl');
        $qb->select('itl, it')
                ->join('itl.itemtype', 'it')
                ->where('itl.language=:langId')
                ->andWhere('it.status=1');
        if (!empty($limitCat)) {
            $qb->setMaxResults($limitCat);
        }
        $qb->setParameter('langId', $langId);
        if (!empty($orders)) {
            $qb->orderBy($orders);
        } else if (is_array($orders) && count($orders) > 0) {
            foreach ($orders as $k => $v) {
                $qb->orderBy($k, $v);
            }
        } else {
            $qb->orderBy('it.lft', 'DESC');
        }
        $itemTypes = $qb->getQuery()->getResult();
        
        $em = $this->getEntityManager();
        $repItemLang = $em->getRepository('SMAdminBundle:ItemLanguage');
        if (is_array($itemTypes) && count($itemTypes) > 0) {
            $i = 0;
            foreach ($itemTypes as $obj) {
                $rst[$i]['itemtypes'] = $obj;
                $rst[$i]['items'] = $repItemLang->findByLangAndNameAndItemType($langId, '', $obj->getItemType()->getId(), $limitItem);
                $i ++;
            }
        }
        
        return $rst;
    }

}
